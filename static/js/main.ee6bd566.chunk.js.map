{"version":3,"sources":["components/Logo/Logo.module.css","components/ImageLinkForm/ImageLinkForm.module.css","components/FaceRecognition/FaceRecognition.module.css","components/Navigation/Navigation.module.css","assets/icon.png","components/Navigation/Navigation.js","components/Logo/Logo.js","components/ImageLinkForm/ImageLinkForm.js","components/FaceRecognition/FaceRecognition.js","App.js","serviceWorker.js","store/reducer.js","index.js"],"names":["module","exports","Logo","Tilt","ImageLinkForm","Input","FaceRecognition","boundingbox","navigation","__webpack_require__","p","props","react_default","a","createElement","className","styles","logo","tilt_default","options","max","style","height","width","src","icon","connect","state","resultUrl","url","dispatch","onSetUrl","type","payload","onSetBox","box","_useState","useState","_useState2","Object","slicedToArray","setUrl","onChange","event","target","value","onClick","Clarifai","App","apiKey","models","predict","FACE_DETECT_MODEL","then","res","data","image","document","getElementById","Number","leftCol","left_col","rightCol","right_col","topRow","top_row","bottomRow","bottom_row","calculateFaceLocation","outputs","regions","region_info","bounding_box","console","log","catch","err","resultBox","boundingBox","top","left","right","bottom","id","particles_default","params","particles","line_linked","shadow","enable","color","blur","number","density","value_area","Navigation","components_ImageLinkForm_ImageLinkForm","components_FaceRecognition_FaceRecognition","Boolean","window","location","hostname","match","initialState","reducer","arguments","length","undefined","action","objectSpread","store","createStore","ReactDOM","render","es","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ee6bd566.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Logo_Logo__1HDpj\",\"Tilt\":\"Logo_Tilt__QsAVu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ImageLinkForm\":\"ImageLinkForm_ImageLinkForm__NXu41\",\"Input\":\"ImageLinkForm_Input__1_PDO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FaceRecognition\":\"FaceRecognition_FaceRecognition__2F7d2\",\"boundingbox\":\"FaceRecognition_boundingbox__3wiTy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navigation\":\"Navigation_navigation__Kass3\"};","module.exports = __webpack_public_path__ + \"static/media/icon.b203c293.png\";","import React from 'react'\nimport styles from './Navigation.module.css'\n\nconst navigation = (props)=>{\n    return (\n        <nav className={styles.navigation}>\n            <p>Sign Out</p>\n        </nav>\n    )\n}\n\nexport default navigation","import React from 'react'\nimport Tilt from 'react-tilt'\nimport styles from './Logo.module.css'\nimport icon from '../../assets/icon.png'\n\nconst logo = (props)=>{\n    return (\n        <div className= {styles.Logo}>\n            <Tilt className={styles.Tilt} options={{ max : 80 }} style={{ height: 150, width: 150 }} >\n                <div className=\"Tilt-inner\"> <img src={icon}></img> </div>\n            </Tilt>\n        </div>\n\n    )\n}\n\nexport default logo","import React,{useEffect,useState} from 'react'\nimport styles from './ImageLinkForm.module.css'\nimport Clarifai from 'clarifai'\nimport {connect} from 'react-redux'\n\nconst ImageLinkForm = (props)=>{\n\n    const [url,setUrl] = useState('')\n\n    const inputChangeHandler = (event)=>{\n        setUrl(event.target.value)\n        props.onSetUrl(event.target.value)\n    }\n    const calculateFaceLocation = (data)=>{\n        const image = document.getElementById('faceImage')\n        const width = Number(image.width)\n        const height = Number(image.height)\n        return {\n            leftCol: data.left_col*width,\n            rightCol: width-data.right_col*width,\n            topRow: data.top_row*height,\n            bottomRow: height-data.bottom_row*height\n        }\n    }\n    const displayFaceBox = (box)=>{\n        console.log(box)\n        props.onSetBox(box)\n    }\n    const detectHandler = ()=>{\n        const app = new Clarifai.App({\n            apiKey: '73aec42aa5b54cd2ad3188eb56a1df7d'\n           });\n        app.models.predict(Clarifai.FACE_DETECT_MODEL, url)\n            .then(res=>{\n                displayFaceBox( calculateFaceLocation(res.outputs[0].data.regions[0].region_info.bounding_box) )\n            })\n            .catch(err=>{\n                console.log(err)\n            })\n        \n    }\n    return (\n        <div className={styles.ImageLinkForm}>\n            <p>this will detect the brain in your image just give it a link to detect:</p>\n            <div className={styles.Input}>\n                <input type='text' onChange={inputChangeHandler}></input>\n                <button onClick={detectHandler}>Detect</button>\n            </div>\n        </div>\n    )\n}\nconst mapStateToProps = (state)=>{\n    return {\n        resultUrl: state.url\n    }\n}\nconst mapDispatchToProps = (dispatch)=>{\n    return {\n        onSetUrl: (url)=>dispatch({type:'setUrl',payload:url}),\n        onSetBox: (box)=>dispatch({type:'setBox',payload:box})\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(ImageLinkForm)","import React from 'react'\nimport styles from './FaceRecognition.module.css'\nimport {connect} from 'react-redux'\n\nconst FaceRecognition = (props)=>{\n    let boundingBox = null\n    if(props.resultBox){\n        boundingBox = <div className={styles.boundingbox} style={{top:props.resultBox.topRow,left:props.resultBox.leftCol,right:props.resultBox.rightCol,bottom:props.resultBox.bottomRow}} />\n    }\n    return (\n        <div className={styles.FaceRecognition}>\n            <img id='faceImage' src={props.resultUrl}></img>\n            {boundingBox}\n        </div>\n    )\n}\n\nconst mapStateToProps =(state)=>{\n    return {\n        resultUrl: state.url,\n        resultBox: state.box\n    }\n}\nexport default connect(mapStateToProps)(FaceRecognition) ","import React from 'react';\nimport './App.css';\nimport Navigation from './components/Navigation/Navigation'\nimport Logo from './components/Logo/Logo'\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm'\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition.js'\nimport Particles from 'react-particles-js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Particles \n        className=\"particles\"\n        params={{\n          particles: {\n            line_linked: {\n              shadow: {\n                enable: true,\n                color: \"#3CA9D1\",\n                blur: 5\n              }\n            },\n            number: {\n              \"value\": 80,\n              \"density\": {\n                \"enable\": true,\n                \"value_area\": 800\n              }\n            }\n          }\n        }}\n\n      />\n      <Navigation />\n      <Logo />\n      <ImageLinkForm />\n      <FaceRecognition />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nconst initialState = {\n    url:'',\n    box: null\n}\n\nconst reducer = (state=initialState,action)=>{\n    switch(action.type){\n        case('setUrl'):\n            return {\n                ...state,\n                url:action.payload\n            }\n        case('setBox'):\n            return {\n                ...state,\n                box:action.payload\n            }\n        default:\n            return state\n    }\n}\n\nexport default reducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux'\nimport {createStore} from 'redux'\nimport reducer from './store/reducer'\n\nconst store = createStore(reducer)\n\n\nReactDOM.render(<Provider store={store}>\n    <App />\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}